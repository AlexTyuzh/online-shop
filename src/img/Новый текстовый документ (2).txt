import "./App.css";
import React, { useState, useEffect, useRef } from "react";

function App() {
  const boardSize = 30;
  const [food, setFood] = useState({ x: 10, y: 10 });
  const [snake, setSnake] = useState([{ x: 5, y: 5 }]);
  const [direction, setDirection] = useState({ x: 0, y: 0 });
  const [score, setScore] = useState(0);
  const [highScore, setHighScore] = useState(
    parseInt(localStorage.getItem("high-score")) || 0
  );
  const [gameOver, setGameOver] = useState(false);
  const [isGameStarted, setIsGameStarted] = useState(false);
  const intervalRef = useRef(null);

  const updateFoodPosition = () => {
    const x = Math.floor(Math.random() * boardSize) + 1;
    const y = Math.floor(Math.random() * boardSize) + 1;
    setFood({ x, y });
  };

  const resetGame = () => {
    setSnake([{ x: 5, y: 5 }]);
    setDirection({ x: 0, y: 0 });
    setScore(0);
    setGameOver(false);
    setIsGameStarted(false);
    updateFoodPosition();
  };

  const handleGameOver = () => {
    setGameOver(true);
    clearInterval(intervalRef.current);
    if (score > highScore) {
      setHighScore(score);
      localStorage.setItem("high-score", score);
    }
    alert("Game Over! Press OK to restart");
    resetGame();
  };

  const changeDirection = (e) => {
    const { key } = e;
    if (key === "ArrowUp" && direction.y !== 1) {
      setDirection({ x: 0, y: -1 });
    } else if (key === "ArrowDown" && direction.y !== -1) {
      setDirection({ x: 0, y: 1 });
    } else if (key === "ArrowLeft" && direction.x !== 1) {
      setDirection({ x: -1, y: 0 });
    } else if (key === "ArrowRight" && direction.x !== -1) {
      setDirection({ x: 1, y: 0 });
    }
  };

  useEffect(() => {
    document.addEventListener("keydown", changeDirection);
    return () => document.removeEventListener("keydown", changeDirection);
  });

  useEffect(() => {
    if (gameOver || !isGameStarted) return;

    const moveSnake = () => {
      setSnake((prevSnake) => {
        const newSnake = [...prevSnake];
        const head = {
          x: newSnake[newSnake.length - 1].x + direction.x,
          y: newSnake[newSnake.length - 1].y + direction.y,
        };

        // Check collision with walls
        if (
          head.x <= 0 ||
          head.x > boardSize ||
          head.y <= 0 ||
          head.y > boardSize
        ) {
          handleGameOver();
          return prevSnake;
        }

        // Check collision with self
        if (
          newSnake.some(
            (segment) => segment.x === head.x && segment.y === head.y
          )
        ) {
          handleGameOver();
          return prevSnake;
        }

        newSnake.push(head);

        // Check if snake eats food
        if (head.x === food.x && head.y === food.y) {
          setScore((prevScore) => prevScore + 1);
          updateFoodPosition();
        } else {
          newSnake.shift(); // Remove tail if no food eaten
        }

        return newSnake;
      });
    };

    intervalRef.current = setInterval(moveSnake, 150);
    return () => clearInterval(intervalRef.current);
  });

  const renderBoard = () => {
    const board = [];
    for (let y = 1; y <= boardSize; y++) {
      for (let x = 1; x <= boardSize; x++) {
        const isSnake = snake.some(
          (segment) => segment.x === x && segment.y === y
        );
        const isFood = food.x === x && food.y === y;
        board.push(
          <div
            key={`${x}-${y}`}
            className={`cell ${isSnake ? "snake" : ""} ${isFood ? "food" : ""}`}
          ></div>
        );
      }
    }
    return board;
  };

  const startGame = () => {
    setIsGameStarted(true);
    setDirection({ x: 1, y: 0 });
  };

  return (
    <div className="game-container">
      <div className="score-board">
        <div>Score: {score}</div>
        <div>High Score: {highScore}</div>
      </div>
      {!isGameStarted && !gameOver && (
        <button className="start-button" onClick={startGame}>
          Start Game
        </button>
      )}
      <div className="play-board">{renderBoard()}</div>
    </div>
  );
}

export default App;
