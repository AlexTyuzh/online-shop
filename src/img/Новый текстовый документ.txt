import "./App.css";
import React, { useState, useEffect, useCallback } from "react";

function App() {
  const [food, setFood] = useState({ x: 15, y: 15 });
  const [snake, setSnake] = useState([{ x: 10, y: 5 }]);
  const [direction, setDirection] = useState({ x: 1, y: 0 });
  const [score, setScore] = useState(0);
  const [highScore, setHighScore] = useState(
    parseInt(localStorage.getItem("high-score")) || 0
  );
  // const [highScore, setHighScore] = useState(Number(localStorage.getItem("high-score")));
  const [gameOver, setGameOver] = useState(false);

  const boardSize = 30;

  // Update food position

  const updateFoodPosition = useCallback(() => {
    const x = Math.floor(Math.random() * boardSize) + 1;
    const y = Math.floor(Math.random() * boardSize) + 1;
    setFood({ x, y });
  }, [boardSize]);

  // Handle game over
  const handleGameOver = useCallback(() => {
    alert("Game Over! Press OK to replay...");
    setGameOver(true);
    setDirection({ x: 1, y: 0 });
    setSnake([{ x: 5, y: 5 }]);
    setScore(0);
    updateFoodPosition();
  }, [updateFoodPosition]);

  // Handle key press for direction
  useEffect(() => {
    const changeDirection = (e) => {
      if (e.key === "ArrowUp" && direction.y !== 1) {
        setDirection({ x: 0, y: -1 });
      } else if (e.key === "ArrowDown" && direction.y !== -1) {
        setDirection({ x: 0, y: 1 });
      } else if (e.key === "ArrowLeft" && direction.x !== 1) {
        setDirection({ x: -1, y: 0 });
      } else if (e.key === "ArrowRight" && direction.x !== -1) {
        setDirection({ x: 1, y: 0 });
      }
    };
    document.addEventListener("keydown", changeDirection);
    return () => document.removeEventListener("keydown", changeDirection);
  }, [direction]);

  // Game loop
  useEffect(() => {
    if (gameOver) return;

    const gameInterval = setInterval(() => {
      setSnake((prevSnake) => {
        const newSnake = [...prevSnake];
        const head = {
          x: newSnake[newSnake.length - 1].x + direction.x,
          y: newSnake[newSnake.length - 1].y + direction.y,
        };

        // Check for collisions
        if (
          head.x <= 0 ||
          head.x > boardSize ||
          head.y <= 0 ||
          head.y > boardSize ||
          newSnake.some(
            (segment) => segment.x === head.x && segment.y === head.y
          )
        ) {
          handleGameOver();
          clearInterval(gameInterval);
          return prevSnake;
        }

        newSnake.push(head);

        // Check if snake eats food
        if (head.x === food.x && head.y === food.y) {
          setScore((prevScore) => {
            const newScore = prevScore + 1;
            if (newScore > highScore) {
              setHighScore(newScore);
              localStorage.setItem("high-score", newScore);
            }
            return newScore;
          });
          updateFoodPosition();
        } else {
          newSnake.shift(); // Remove tail if no food eaten
        }

        return newSnake;
      });
    }, 100);

    return () => clearInterval(gameInterval);
  }, [
    direction,
    food,
    boardSize,
    gameOver,
    handleGameOver,
    highScore,
    updateFoodPosition,
  ]);

  return (
    <div className="container">
      <div className="scores">
        <div>Score: {score}</div>
        <div>High Score: {highScore}</div>
      </div>
      <div
        className="game-board"
        style={{ gridTemplateColumns: `repeat(${boardSize}, 1fr)` }}
      >
        {snake.map((segment, index) => (
          <div
            key={index}
            className="snake"
            style={{ gridArea: `${segment.y} / ${segment.x}` }}
          ></div>
        ))}
        <div
          className="food"
          style={{ gridArea: `${food.y} / ${food.x}` }}
        ></div>
      </div>
    </div>
  );
}

export default App;




* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

.container {
  background-color: lightgrey;
  max-width: 100%;
  width: 500px;
  height: 500px;
}

.scores {
  display: flex;
  justify-content: space-between;
}

.game-board {
  height: 100%;
  width: 100%;
  display: grid;
  grid-template: repeat(30, 1fr) / repeat(30, 1fr);
  background-color: darkslategray;
}

.snake {
  background-color: green;
  box-shadow: 0 0 4px rgba(255, 255, 255, 0.7);
}

.food {
  background-color: red;
  border-radius: 50%;
}
